generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String
  lastName          String?
  password          String
  role              UserRole            @default(USER)
  roomId            String?
  alarmCode         String?
  resetToken        String?
  resetTokenExpires DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  activityLogs      ActivityLog[]
  cleaningRecords   CleaningRecord[]
  presence          Presence?
  penalties         UncheckoutPenalty[]
  room              Room?               @relation(fields: [roomId], references: [id])

  @@map("users")
}

model Floor {
  id                String             @id @default(cuid())
  number            Int                @unique
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cleaningRecords   CleaningRecord[]
  cleaningRotations CleaningRotation[]
  cleaningSettings  CleaningSettings?
  rooms             Room[]

  @@map("floors")
}

model Room {
  id                String             @id @default(cuid())
  name              String
  project           String?
  floorId           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cleaningRecords   CleaningRecord[]
  cleaningRotations CleaningRotation[]
  registrationCodes RegistrationCode[]
  floor             Floor              @relation(fields: [floorId], references: [id])
  users             User[]

  @@map("rooms")
}

model Presence {
  id        String   @id @default(cuid())
  userId    String   @unique
  isPresent Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("presence")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model UncheckoutPenalty {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@map("uncheckout_penalties")
}

model CleaningSettings {
  id                String   @id @default(cuid())
  floorId           String   @unique
  frequency         String
  pendingFrequency  String?
  pendingFromPeriod String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  floor             Floor    @relation(fields: [floorId], references: [id])

  @@map("cleaning_settings")
}

model CleaningRotation {
  id        String   @id @default(cuid())
  floorId   String
  roomId    String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  floor     Floor    @relation(fields: [floorId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])

  @@unique([floorId, roomId])
  @@map("cleaning_rotations")
}

model CleaningRecord {
  id          String   @id @default(cuid())
  floorId     String
  roomId      String
  userId      String
  photos      String
  completedAt DateTime @default(now())
  period      String
  createdAt   DateTime @default(now())
  floor       Floor    @relation(fields: [floorId], references: [id])
  room        Room     @relation(fields: [roomId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("cleaning_records")
}

model RegistrationCode {
  id        String    @id @default(cuid())
  code      String    @unique
  role      UserRole  @default(USER)
  roomId    String?
  room      Room?     @relation(fields: [roomId], references: [id])
  isUsed    Boolean   @default(false)
  usedBy    String?
  usedAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("registration_codes")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}
